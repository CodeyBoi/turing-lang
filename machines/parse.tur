states find_start find_end init op_exists goto_op BRANCH a b c not::a nand::a nand::b nand::c or::a or::b or::c not::not::a not::b
syms 0 1 ( ) & D | !
initstate find_start
finalstates HALT
table
find_start ( find_end _ R 
find_start * . . L 
find_end ) init _ L 
find_end * . . R
init _ BRANCH . N 
init 0,1 . . L
init * op_exists . L 
op_exists _ goto_op . R
op_exists * . . L 
goto_op 0,1 . . R 
goto_op * BRANCH . N
a-c & . _ L
a 0 c _ L
a 1 b _ L
b 0 not::a 1 N
b 1 not::a 0 N
c 0-1 not::a 1 N
not::a 0 HALT 1 N
not::a 1 HALT 0 N
nand::a-nand::c D . _ L
nand::a 0 nand::c _ L
nand::a 1 nand::b _ L
nand::b 0 HALT 1 N
nand::b 1 HALT 0 N
nand::c 0-1 HALT 1 N
or::a-or::c | . _ L
or::a 1 or::c _ L 
or::a 0 or::b _ L
or::b 0-1 HALT . N
or::c 0-1 HALT 1 N
not::not::a 0 not::not::a _ L
not::not::a 1 not::b _ L
not::not::a ! HALT 1 N 
not::b ! HALT 0 N
BRANCH & a . R
BRANCH D nand::a . R
BRANCH | or::a . R
BRANCH ! not::not::a . R
BRANCH _ HALT . R